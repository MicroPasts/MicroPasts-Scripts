#! /usr/bin/env python

# Copyright 2016 Tom SF Haines

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

import sys
import os.path
import argparse
import subprocess



# Handle command line arguments...
parser = argparse.ArgumentParser(description='Renders an entire directory of .blend files that have been generated by the other scripts, replacing the amphora material with the one in materials.blend. Has makefile behaviour, so it only renders if the image does not exist/has an edit date older than the .blend file.')

parser.add_argument('-f', '--force', help='Forces it to process all files, even if they have already been processed. Should only be necesary when making modifications to the scripts.',  default=False, action='store_true')

default_blender = '~/blender/blender'
if sys.platform.startswith('darwin'):
  default_blender = '~/blender/blender.app/Contents/MacOS/blender'

parser.add_argument('-b', '--blender', help="Where to find Blender on the operating system; defaults to '~blender/blender' on Linux, '~/blender/blender.app/Contents/MacOS/blender' on Mac. The assumption in both cases is that it is in the folder 'blender' under your home directory.", type=str, default=default_blender)

parser.add_argument('dir', help='Directory it searches for .blend files.')


args = parser.parse_args()


## For conveniance - assume the Blender script is in the same directory as this one, and pretend its an argument...
args.script = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'render_with_material_switch.py')

# Also need the path to the materials.blend file...
args.material = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'materials.blend')

## Convert the directory to a full path...
args.dir = os.path.realpath(os.path.expanduser(args.dir))

## Ditto for blender location...
args.blender = os.path.realpath(os.path.expanduser(args.blender))



# Search entire directory structure, find all files that we may need to process...
blend_files = []

def search(path):
  for child in os.listdir(path):
    full = os.path.join(path, child)
    
    if os.path.isdir(full): # Recurse into directories
      search(full)
    
    elif os.path.isfile(full) and full.endswith('.blend'):
      blend_files.append(full)


search(args.dir)

print('Found %i blend files' % len(blend_files))



# Second pass - cull down to those that have not already been processed...
def path_to_render(path):
  dirs, fn = os.path.split(path)
  early_dirs, parent_dir = os.path.split(dirs)
  return os.path.join(dirs, parent_dir + '.png')


if args.force:
  jobs = blend_files[:] # Do them all if force is True.

else:
  jobs = []
  
  for path in blend_files:
    test = path_to_render(path)
    print test

    if (not os.path.exists(test)) or (os.path.getmtime(test) < os.path.getmtime(path)):
      jobs.append(path)


already_done = len(blend_files) - len(jobs)

if already_done>0:
  print('%i have already been processed - skipping them.' % already_done)



# Do the work - loop the files and run the script on each in turn...
for i, job in enumerate(jobs):
  print('Processing %i of %i' % (i+1, len(jobs)))
  print('    ' + job)
  
  cmd = [args.blender, '-b', job, '--python', args.script, '--', args.material]
  
  #print cmd
  subprocess.call(cmd)
